"use strict";
const path = require('path');
const mod = require('module');

const coreModules = ["assert", "buffer", "child_process", "cluster", "crypto", "dgram", "dns", "domain", "events", "fs",
	"http", "https", "net", "os", "path", "punycode", "querystring", "readline", "repl", "smalloc", "stream",
	"string_decoder", "tls", "tty", "url", "util", "v8", "vm", "zlib"];

function buildPaths(basePath) {
	let paths = [];
	let b = path.dirname(basePath);
	while (b.indexOf(path.sep) + 1 && b.indexOf(path.sep) !== b.length - 1) {
		paths.push(b + path.sep + "node_modules");
		b = path.dirname(b);
	}
	return paths;
}

function findFile(req, parent) {
	if ( coreModules.indexOf(req)>=0 ) return req;
	const start = req.slice(0, 2);
	let paths = [""];
	if (start !== './' && start !== '..') {
		paths = buildPaths(parent);
	} else paths = [path.dirname(parent)];
	return mod._findPath(req, paths);
}

function getRequired(text, position) {
	//we define the regExp here because it may think it's being re-run
	//when we come in the second time.
	const _require = /require\s*\(\s*(['"])(.*?[^\\])\1\s*\)/g;
	let match = _require.exec(text);
	let r;
	while (match) {
		r = match[2];
		if (match.index + match[0].length > position) break;
		match = _require.exec(text);
	}
	//this way, it sets it to either the one that the cursor is over,
	//the last one on the line, or nothing (ie. there isn't one).
	return r;
}

function findAll(text) {
	const _require = /(require\s*\(\s*)(['"])(.*?[^\\])\2\s*\)/g;
	let match = _require.exec(text);
	let result = [];
	let r;
	while (match) {
		r = {
			name: match[3],
			start: match.index + match[1].length + 1
		};
		r = result.push(r);
		match = _require.exec(text);
	}
	//this way, it sets it to either the one that the cursor is over,
	//the last one on the line, or nothing (ie. there isn't one).
	return result;
}
module.exports = {
	findSource: getRequired,
	resolve: findFile,
	findAll: findAll
};
