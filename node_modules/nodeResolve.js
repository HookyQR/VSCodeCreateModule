"use strict";
const path = require('path');
const mod = require('module');

const coreModules = ["assert", "buffer", "child_process", "cluster", "crypto", "dgram", "dns", "domain", "events", "fs",
	"http", "https", "net", "os", "path", "punycode", "querystring", "readline", "repl", "smalloc", "stream",
	"string_decoder", "tls", "tty", "url", "util", "v8", "vm", "zlib"];

function buildPaths(basePath) {
	let paths = [];
	let b = path.dirname(basePath);
	while (b.indexOf(path.sep) + 1 && b.indexOf(path.sep) !== b.length - 1) {
		paths.push(b + path.sep + "node_modules");
		b = path.dirname(b);
	}
	return paths;
}

function findFile(req, parent, es6) {
	if (coreModules.indexOf(req) >= 0) return req;
	const start = req.slice(0, 2);
	let paths = [""];
	if (es6) {
		if (path.isAbsolute(req)) paths = [""];
		else paths = [path.dirname(parent)];
	} else if (start !== './' && start !== '..') paths = buildPaths(parent);
	else paths = [path.dirname(parent)];
	return mod._findPath(req, paths);
}

function findAllNode(text) {
	const _require = /(require\s*\(\s*)(['"])(.*?[^\\])\2\s*\)/g;
	let match = _require.exec(text);
	let result = [];
	let r;
	while (match) {
		r = {
			name: match[3],
			start: match.index + match[1].length + 1,
			type: "node"
		};
		r = result.push(r);
		match = _require.exec(text);
	}
	//this way, it sets it to either the one that the cursor is over,
	//the last one on the line, or nothing (ie. there isn't one).
	return result;
}

function findAllES6(text) {
	const _require = /(import\s.*?\sfrom\s*)(['"])(.*?[^\\])\2/g;
	let match = _require.exec(text);
	let result = [];
	let r;
	while (match) {
		r = {
			name: match[3],
			start: match.index + match[1].length + 1,
			type: "es6"
		};
		r = result.push(r);
		match = _require.exec(text);
	}
	//this way, it sets it to either the one that the cursor is over,
	//the last one on the line, or nothing (ie. there isn't one).
	return result;
}

function findAll(text, es6) {
	let r = findAllNode(text);
	if (es6) return r.concat(findAllES6(text));
	else return r;
}

module.exports = {
	resolve: findFile,
	findAll: findAll
};
